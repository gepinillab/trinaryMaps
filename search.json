[{"path":"https://gepinillab.github.io/trinaryMaps/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 trinaryMaps authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/articles/trinaryMaps.html","id":"background","dir":"Articles","previous_headings":"","what":"Background","title":"Trinary Maps Vignette","text":"Continuous model predictions compared binary data evaluation variety application; ’m thinking Species Distribution Models (SDMs) following probably used application. evaluate continuous predictions model - SDM case ‘suitability’ scores - one must choose threshold value suitability model predicts species presence model predicts absence. Coming reasonable threshold difficult SDMs, particularly presence-backround data involved. Use AUC statistic meant avoid issues choosing particular threshold evaluate model performance possible thresholds. Even still, SDM applications, still often need generating binary map continuous predictions, means picking threshold. specific problem choosing threshold using presence-background data SDMs background ‘contaminated’ - contains (unknown) presences biases binary classification statistics. One common threshold choice based maximizing sum sensitivity specificity (.e., Youden threshold), penalizes model incorrectly predicting background points presence locations, fact may presences.contribution ‘trinaryMaps’ put useful bounds reasonable values threshold might . can’t determine optimal threshold, can least identify upper lower limits know surrounded. approach identifying limits heuristic based formal theory; rather based analyzing ROC curve identifying limits beyond model predictions aren’t likely useful application SDMs. example, care discrimination SDM based threshold gets 7% presences correct? implies upper limit useful threshold (higher threshold implies fewer predicted presences). Similarly, anyone want model predicts 4% background absence? model non-discriminating, even build model just use modeling domain range estimate? suggests useful lower limit (lower threshold implies predicted presences). can objectively find upper lower limits? Answering contribution trinaryMaps.","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/articles/trinaryMaps.html","id":"using-trinary-maps","dir":"Articles","previous_headings":"","what":"Using Trinary Maps","title":"Trinary Maps Vignette","text":"Building trinary maps involves inputs one use binary classification package specifically structured use SDMs: 1. Model prediction (spatRaster) 2. Occurrences coordinates (data.frame) 3. Background coordinates (data.frame)","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/articles/trinaryMaps.html","id":"basic-workflow","dir":"Articles","previous_headings":"","what":"Basic Workflow","title":"Trinary Maps Vignette","text":"trinaryMapWorkflow() function main entry point using package. performs following steps: 1. Calculates upper lower ROC bounds 2. Creates trinary map based bounds 3. Calculates range sizes associated generated trinary map Plots ROC curve upper lower ROC bounds. ’s example use trinaryMapWorkflow function:","code":"library(trinaryMaps) library(terra) ## terra 1.7.78 # YOU CAN REGENERATE THE OCCURRENCE, BACKGROUND AND RASTER PREDICTION OF  # THIS EXAMPLE USING THE CODE AT THE END OF THIS VIGNETTE ext_data <- system.file(\"extdata\", package = 'trinaryMaps')  occs <- read.csv(paste0(ext_data, \"/occs.csv\")) bg <- read.csv(paste0(ext_data, \"/bg.csv\")) r <- terra::rast(paste0(ext_data, \"/prediction.tif\")) # Run trinaryMapWorkflow tr <- trinaryMapWorkflow(pres = occs,                           background = bg,                           rModel = r) ## 94 presences and 9681 background points used for building trinary maps"},{"path":"https://gepinillab.github.io/trinaryMaps/articles/trinaryMaps.html","id":"plotting-the-trinary-map","dir":"Articles","previous_headings":"Basic Workflow","what":"Plotting the Trinary Map","title":"Trinary Maps Vignette","text":"trinary map categorical map transformed three classes based upper lower bounds calculated trinaryMapWorkflow() function. plot provides visual representation three classes occur. Class 0 corresponds pixels values higher ROC bound threshold (definitely unoccupied habitat), class 1 correspond pixels greater equal upper ROC bound threshold less lower ROC bound threshold (marginal, occasional, uncertain occupied habitat), class 2 denotes pixels values lower ROC bound threshold (likely occupied habitat).","code":"plot(tr$trinary.rasters) points(occs)"},{"path":"https://gepinillab.github.io/trinaryMaps/articles/trinaryMaps.html","id":"range-size","dir":"Articles","previous_headings":"Basic Workflow","what":"Range Size","title":"Trinary Maps Vignette","text":"chunk calculates range sizes associated threshold value trinary map. range size important metric can used understand sensitivity specificity model predictions different threshold values.","code":"# Area trinaryRangeSize(tr$trinary.rasters) ##   range.size.lo.km2 range.size.hi.km2 ## 1          13413279           3385016"},{"path":"https://gepinillab.github.io/trinaryMaps/articles/trinaryMaps.html","id":"trinary-map-roc-plots","dir":"Articles","previous_headings":"Basic Workflow","what":"Trinary Map ROC Plots","title":"Trinary Maps Vignette","text":"function trinaryROCPlot() generates five ROC plots help determine lower upper bound thresholds. plots facilitate understanding trinary map constructed.","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/articles/trinaryMaps.html","id":"roc","dir":"Articles","previous_headings":"Basic Workflow > Trinary Map ROC Plots","what":"ROC","title":"Trinary Maps Vignette","text":"plot shows smoothed ROC curve binormal density smoothing. red dot marks location lower ROC bound threshold, represents minimum sensitivity maximum specificity value. yellow dot indicates youden threshold, corresponding maximum sum sensitivity specificity values. blue dot marks upper ROC bound threshold, represents maximum sensitivity minimum value specificity.","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/articles/trinaryMaps.html","id":"roc-first-derivative","dir":"Articles","previous_headings":"Basic Workflow > Trinary Map ROC Plots","what":"ROC’: First Derivative","title":"Trinary Maps Vignette","text":"first derivative smoothed ROC curve shown . plot helps identify point ROC curve trade-true positive rates false positive rates optimized. Note youden threshold corresponds root.","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/articles/trinaryMaps.html","id":"logmodroc-logmod-of-second-derivative","dir":"Articles","previous_headings":"Basic Workflow > Trinary Map ROC Plots","what":"logmod(ROC’’): Logmod of Second Derivative","title":"Trinary Maps Vignette","text":"plot displays second derivative smoothed ROC curve applying logmod transformation. helps identify upper ROC bound threshold (blue).","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/articles/trinaryMaps.html","id":"inverted-roc","dir":"Articles","previous_headings":"Basic Workflow > Trinary Map ROC Plots","what":"Inverted ROC","title":"Trinary Maps Vignette","text":"calculate upper bound threshold, horizontal vertical axes inverted plot. results “inverted ROC” curve high specificity values correspond low true positive rates, vice versa.","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/articles/trinaryMaps.html","id":"logmodinverted-roc","dir":"Articles","previous_headings":"Basic Workflow > Trinary Map ROC Plots","what":"logmod(Inverted ROC)","title":"Trinary Maps Vignette","text":"second derivative inverted ROC curve calculated applying logmod transformation. red dot marks lower ROC bound threshold.","code":"trinaryROCPlot(tr$threshs$plotThings, trinaryDF = tr$threshs$trinaryDF)"},{"path":"https://gepinillab.github.io/trinaryMaps/articles/trinaryMaps.html","id":"custom-example-trinaryrocroots-gepb-needs-to-ask-cm","dir":"Articles","previous_headings":"","what":"Custom example (trinaryROCRoots)** (GEPB needs to ask CM)","title":"Trinary Maps Vignette","text":"trinaryMapWorkflow() function calculates upper lower ROC bounds using default parameters. want customize calculation bounds, can modify following parameters: maxTPQuantile: quantile value representing predicted values presence locations used determine upper ROC threshold presence predictions. example, value 0.3 means function uses 30th percentile predicted presence values upper threshold, ensuring model maintains least 70% sensitivity. sdMultiplier: scaling factor applied standard deviation predictions, used inconjunction max.sens calculate lower ROC bound. max.sens: maximum true positive rate allowed lower ROC bound calculation. parameter used combination sdMultiplier determine optimal threshold lower bound. , modified maximum quantile 20th percentile, change maximum sensitivity allowed lower ROC bound 0.99.","code":"# Issues with maxTPQuantile, max.sens, and sdMultiplier. Results are the same that previus example. tr2 <- trinaryMapWorkflow(pres = occs,                            background = bg,                            rModel = r,                            maxTPQuantile = 0.5,                           max.sens = 0.7) ## 94 presences and 9681 background points used for building trinary maps plot(tr2$trinary.rasters) trinaryROCPlot(tr2$threshs$plotThings, trinaryDF = tr2$threshs$trinaryDF)"},{"path":"https://gepinillab.github.io/trinaryMaps/articles/trinaryMaps.html","id":"additional-code","dir":"Articles","previous_headings":"Custom example (trinaryROCRoots)** (GEPB needs to ask CM)","what":"Additional Code","title":"Trinary Maps Vignette","text":"","code":"library(predicts) library(maxnet) # Load example data occurence <- system.file(\"/ex/bradypus.csv\", package = \"predicts\") occ <- read.csv(occurence)[, -1] f <- system.file(\"ex/bio.tif\", package = \"predicts\") envs <- terra::rast(f)  # Prepare data for modeling data <- terra::values(envs) |> as.data.frame() data$ID <- 1:(terra::nrow(envs) * terra::ncol(envs)) occs.p <- terra::extract(envs, occ, cells = TRUE) data$p <- rep(0, terra::ncell(envs)) data$p[occs.p$cell] <- 1 data$x <- terra::xFromCell(envs, 1:terra::ncell(envs)) data$y <- terra::yFromCell(envs, 1:terra::ncell(envs)) data <- na.omit(data)  # Build and predict model mod <- maxnet(data$p, data[, 1:9]) p.vals <- predict(mod, terra::values(envs), type = \"cloglog\") suitability <- rep(NA, terra::ncell(envs)) suitability[data$ID] <- p.vals r <- envs[[1]] names(r) <- \"suitability\" terra::values(r) <- suitability occs <- data[data$p == 1, c(\"x\", \"y\")] bg <- data[data$p == 0, c(\"x\", \"y\")]"},{"path":"https://gepinillab.github.io/trinaryMaps/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Cory Merow. Author. Gonzalo E. Pinilla-Buitrago. Author, maintainer.","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Merow C, Pinilla-Buitrago GE (2024). trinaryMaps: Trinary Maps Based Upper Lower ROC Bounds Species' Ranges. R package version 0.1.0, https://gepinillab.github.io/trinaryMaps/.","code":"@Manual{,   title = {trinaryMaps: Trinary Maps Based on Upper and Lower ROC Bounds for Species' Ranges},   author = {Cory Merow and Gonzalo E. Pinilla-Buitrago},   year = {2024},   note = {R package version 0.1.0},   url = {https://gepinillab.github.io/trinaryMaps/}, }"},{"path":[]},{"path":"https://gepinillab.github.io/trinaryMaps/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Trinary Maps Based on Upper and Lower ROC Bounds for Species' Ranges","text":"trinaryMaps package collection functions designed create, analyze, visualize trinary maps. trinary map categorization continuous raster species range estimates pixel one three possible values: 0 (definitely unoccupied habitat), 1 (marginal, occasional, uncertain occupied habitat), 2 (likely occupied habitat).","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Trinary Maps Based on Upper and Lower ROC Bounds for Species' Ranges","text":"install Trinary Maps package, use following command: , load package using:","code":"remotes:install_github(\"gepinillab/trinaryMaps\") # Change to cmerow when published. library(trinaryMaps)"},{"path":"https://gepinillab.github.io/trinaryMaps/index.html","id":"functions","dir":"","previous_headings":"","what":"Functions","title":"Trinary Maps Based on Upper and Lower ROC Bounds for Species' Ranges","text":"Trinary Maps package includes several functions create analyze trinary maps. key functions include: - trinaryMapWorkflow(): function takes species presence background data, along model prediction, generates trinary maps. also calculates information ROC curves. - trinaryROCRoots(): Fit smoothed ROC curve, find bounds threshold report partial AUC statistics. Used internally also trinaryMapWorkflow(). - trinaryROCPlot(): Plot trinary ROC curve , optionally, save output pdf file. - trinaryMap(): Function generate trinary map (spatRaster) based thresholds calculated trinaryROCRoots(). Used internally also trinaryMapWorkflow().","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Trinary Maps Based on Upper and Lower ROC Bounds for Species' Ranges","text":"information examples, refer package vignette:","code":"browseVignettes(\"trinarymaps\")"},{"path":"https://gepinillab.github.io/trinaryMaps/index.html","id":"troubleshooting","dir":"","previous_headings":"","what":"Troubleshooting","title":"Trinary Maps Based on Upper and Lower ROC Bounds for Species' Ranges","text":"issues questions, please refer package documentation vignette.","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Trinary Maps Based on Upper and Lower ROC Bounds for Species' Ranges","text":"trinaryMaps package licensed MIT License. See LICENSE.md information.","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Trinary Maps Based on Upper and Lower ROC Bounds for Species' Ranges","text":"welcome contributions users developers. Please submit pull requests open issues GitHub.","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Trinary Maps Based on Upper and Lower ROC Bounds for Species' Ranges","text":"project developed support NSF Grant 1046328 NASA grant 80NSSC18K0435.","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/dot-deriv.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the derivative — .deriv","title":"Find the derivative — .deriv","text":"Find rate change function respect variable","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/dot-deriv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the derivative — .deriv","text":"","code":".deriv(x, y)"},{"path":"https://gepinillab.github.io/trinaryMaps/reference/dot-logmod.html","id":null,"dir":"Reference","previous_headings":"","what":"Take the logarithm of the absolute value of a number with its sign — .logmod","title":"Take the logarithm of the absolute value of a number with its sign — .logmod","text":"function takes numerical input x, computes logarithm absolute value multiplies sign x. ensures result sign input x.","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/dot-logmod.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Take the logarithm of the absolute value of a number with its sign — .logmod","text":"","code":".logmod(x)"},{"path":"https://gepinillab.github.io/trinaryMaps/reference/dot-logmod.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Take the logarithm of the absolute value of a number with its sign — .logmod","text":"x numerical input.","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/dot-logmod.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Take the logarithm of the absolute value of a number with its sign — .logmod","text":"result taking logarithm absolute value x sign.","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/dot-logmod.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Take the logarithm of the absolute value of a number with its sign — .logmod","text":"","code":".logmod(10) #> [1] 2.302585 .logmod(-5) #> [1] -1.609438"},{"path":"https://gepinillab.github.io/trinaryMaps/reference/dot-middle_pts.html","id":null,"dir":"Reference","previous_headings":"","what":"Middle point of x — .middle_pts","title":"Middle point of x — .middle_pts","text":"Find middle point x","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/dot-middle_pts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Middle point of x — .middle_pts","text":"","code":".middle_pts(x)"},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryMap.html","id":null,"dir":"Reference","previous_headings":"","what":"Make trinary maps — trinaryMap","title":"Make trinary maps — trinaryMap","text":"Use previously calculated thresholds make trinary maps","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryMap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make trinary maps — trinaryMap","text":"","code":"trinaryMap(rModel, thr.roc.lo, thr.roc.hi, rasterOutputPath = NULL, ...)"},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryMap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make trinary maps — trinaryMap","text":"rModel spatRaster representing continuous model predictions thr.roc.lo lower threshold value; typically determined output `trinaryROCRoots()` thr.roc.hi upper threshold value; typically determined output `trinaryROCRoots()` rasterOutputPath optional file name write raster. ... optional arguments pass `terra::writeRaster`","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryMap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make trinary maps — trinaryMap","text":"data.frame","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryMap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Make trinary maps — trinaryMap","text":"Cory Merow <cory.merow@gmail.com>","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryMapWorkflow.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate trinary maps from species presence, background and model prediction — trinaryMapWorkflow","title":"Generate trinary maps from species presence, background and model prediction — trinaryMapWorkflow","text":"function takes species presence background data,  along model, generates trinary maps. also calculates  information ROC curves.","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryMapWorkflow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate trinary maps from species presence, background and model prediction — trinaryMapWorkflow","text":"","code":"trinaryMapWorkflow(   pres,   background,   rModel,   NATo0 = TRUE,   maxTPQuantile = 0.3,   sdMultiplier = 2,   max.sens = 0.95,   smoothMethod = \"binormal\" )"},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryMapWorkflow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate trinary maps from species presence, background and model prediction — trinaryMapWorkflow","text":"pres data.frame object containing species presence data background data.frame object containing background data rModel spatRaster object containing model data NATo0 logical indicating whether turn NA values zeros presence background data maxTPQuantile numeric value representing quantile predicted values presence locations used determine upper threshold presence predictions. example, value `0.3` means function uses 30th percentile predicted presence values upper threshold, ensuring model maintains least 70 sensitivity. Default `0.3`. sdMultiplier numeric value controls adjustment lower threshold presence predictions. multiplies standard deviation predicted values presence locations define lower threshold. threshold results negative value, adjusted zero default. Default `2`. max.sens value sensitivity use upper limit found based derivatives. default 0.95 smoothMethod default 'binormal'","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryMapWorkflow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate trinary maps from species presence, background and model prediction — trinaryMapWorkflow","text":"list containing trinary thresholds trinary rasters","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryROCPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot trinary ROC curve and save the output as pdf file. — trinaryROCPlot","title":"Plot trinary ROC curve and save the output as pdf file. — trinaryROCPlot","text":"Plot trinary ROC curve save output pdf file.","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryROCPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot trinary ROC curve and save the output as pdf file. — trinaryROCPlot","text":"","code":"trinaryROCPlot(trinaryPlotThings, trinaryDF, plotFile = NULL, openFig = TRUE)"},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryROCPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot trinary ROC curve and save the output as pdf file. — trinaryROCPlot","text":"trinaryPlotThings Object trinary ROC curve, contains xx, y, xout, y. attributes. trinaryDF Data frame trinary ROC curve information, including youden.thresh.roc.x, hi.thresh.roc.x, lo.thresh.roc.x, trinary.pauc. plotFile Path save output pdf file. NULL, plot saved. openFig Logical, TRUE, plot shown new window.","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryROCPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot trinary ROC curve and save the output as pdf file. — trinaryROCPlot","text":"None","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryROCRoots.html","id":null,"dir":"Reference","previous_headings":"","what":"Find upper/lower thresholds from ROC curves — trinaryROCRoots","title":"Find upper/lower thresholds from ROC curves — trinaryROCRoots","text":"Fit smoothed ROC curve, find bounds threshold report  partial AUC statistics","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryROCRoots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find upper/lower thresholds from ROC curves — trinaryROCRoots","text":"","code":"trinaryROCRoots(   ins,   max.sens = 0.95,   smoothMethod = \"binormal\",   sdMultiplier = 2,   maxTPQuantile = 0.3,   ... )"},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryROCRoots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find upper/lower thresholds from ROC curves — trinaryROCRoots","text":"ins data frame first column contains observed binary outcomes (e.g., 0 absence 1 presence) second column contains predictor values (e.g., predicted probabilities/suitability). input used calculate ROC curve, derive thresholds, assess model performance. max.sens value sensitivity use upper limit found based derivatives. default 0.95 smoothMethod default 'binormal' sdMultiplier numeric value controls adjustment lower threshold presence predictions. multiplies standard deviation predicted values presence locations define lower threshold. threshold results negative value, adjusted zero default. Default `2`. maxTPQuantile numeric value representing quantile predicted values presence locations used determine upper threshold presence predictions. example, value `0.3` means function uses 30th percentile predicted presence values upper threshold, ensuring model maintains least 70 sensitivity. Default `0.3`. ... options passed `pROC::smooth`","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryROCRoots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find upper/lower thresholds from ROC curves — trinaryROCRoots","text":"data.frame","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryROCRoots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find upper/lower thresholds from ROC curves — trinaryROCRoots","text":"See Examples.","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryROCRoots.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find upper/lower thresholds from ROC curves — trinaryROCRoots","text":"Cory Merow <cory.merow@gmail.com>","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryRangeSize.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate upper and lower limits of range size — trinaryRangeSize","title":"Calculate upper and lower limits of range size — trinaryRangeSize","text":"Size limits based trinary thresholds","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryRangeSize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate upper and lower limits of range size — trinaryRangeSize","text":"","code":"trinaryRangeSize(trinaryRasters)"},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryRangeSize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate upper and lower limits of range size — trinaryRangeSize","text":"trinaryRasters spatRaster describing trinary map. assumed values 0 absent, values 1 represent upper ROC bound, values 2 represent lower ROC bound (e.g., determined `trinaryROCRoots`())","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryRangeSize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate upper and lower limits of range size — trinaryRangeSize","text":"data.frame lower upper ROC bounds.","code":""},{"path":"https://gepinillab.github.io/trinaryMaps/reference/trinaryRangeSize.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate upper and lower limits of range size — trinaryRangeSize","text":"Cory Merow <cory.merow@gmail.com>, Gonzalo E. Pinilla-Buitrago <gepinillab@gmail.com>","code":""}]
